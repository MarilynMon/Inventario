package com.example.demo.rest;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.*;
import com.example.demo.service.*;
import org.springframework.web.bind.annotation.RequestMethod;

@RestController
@CrossOrigin(origins = "*", methods= {RequestMethod.GET,RequestMethod.POST,RequestMethod.DELETE,RequestMethod.PUT})
//@Csrf(origins = "*", methods= {RequestMethod.GET,RequestMethod.POST,RequestMethod.DELETE})
@RequestMapping ("/api/usuario/")

public class UsuarioRest {
	
	
	@Autowired
	private UsuarioService usuarioService;
	
	
	
	@PostMapping
	private ResponseEntity<Usuario> guardar (@RequestBody Usuario usuario){
		Usuario temporal = usuarioService.create(usuario);
		
		try {
			return ResponseEntity.created(new URI("/api/usuario"+temporal.getId())).body(temporal);
			
		}catch (Exception e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}
	
	
	@GetMapping
	private ResponseEntity<List<Usuario>> listarTodasLasPersona (){
		return ResponseEntity.ok(usuarioService.getAllUsuarios());
	}
	
	@DeleteMapping (value = "{id}")
	private ResponseEntity<Void> eliminarPersona (@PathVariable ("id") Long id){
		usuarioService.delete(id);
		return ResponseEntity.ok().build();
	}
	
	@GetMapping (value = "{id}")
	private ResponseEntity<Optional<Persona>> listarUsuariosPorID (@PathVariable ("id") Long id){
		return ResponseEntity.ok(usuarioService.findById(id));
	}
	@PutMapping 
	private ResponseEntity<Usuario> actualizar (@RequestBody Usuario usuario){
		Usuario temp = usuarioService.actualizar(usuario);
		try {
			return ResponseEntity.created(new URI("/api/usuario"+temp.getId())).body(temp);
			
		}catch (Exception e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

}